import React, { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/Button';
import { Badge } from '@/components/ui/badge';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { Edit, Trash2, Star, MapPin, Home } from 'lucide-react';
import { supabase } from '@/lib/supabase';

interface Property {
  id: string;
  title: string;
  location: string;
  price: string;
  type: 'residential' | 'commercial';
  bedrooms: number;
  bathrooms: number;
  area: string;
  image: string;
  featured: boolean;
}

interface PropertyGridProps {
  properties: Property[];
  onEdit: (property: Property) => void;
  onDelete: (id: string) => void;
  onToggleFeatured: (id: string, currentFeatured: boolean) => void;
}

const PropertyGrid = ({ properties, onEdit, onDelete, onToggleFeatured }: PropertyGridProps) => {
  const [propertyImages, setPropertyImages] = useState<Record<string, string>>({});

  useEffect(() => {
    const fetchPrimaryImages = async () => {
      const imagePromises = properties.map(async (property) => {
        try {
          const { data, error } = await supabase
            .from('property_media')
            .select('media_url')
            .eq('property_id', parseInt(property.id))
            .eq('media_type', 'image')
            .eq('is_primary', true)
            .single();
          
          if (data && !error) {
            return { id: property.id, url: data.media_url };
          } else {
            // If no primary image, get the first image
            const { data: firstImage } = await supabase
              .from('property_media')
              .select('media_url')
              .eq('property_id', parseInt(property.id))
              .eq('media_type', 'image')
              .order('display_order', { ascending: true })
              .limit(1)
              .single();
            
            return { 
              id: property.id, 
              url: firstImage?.media_url || property.image || 'https://images.unsplash.com/photo-1600607687939-ce8a6c25118c?w=800'
            };
          }
        } catch (error) {
          return { 
            id: property.id, 
            url: property.image || 'https://images.unsplash.com/photo-1600607687939-ce8a6c25118c?w=800'
          };
        }
      });

      const results = await Promise.all(imagePromises);
      const imageMap = results.reduce((acc, { id, url }) => {
        acc[id] = url;
        return acc;
      }, {} as Record<string, string>);
      
      setPropertyImages(imageMap);
    };

    if (properties.length > 0) {
      fetchPrimaryImages();
    }
  }, [properties]);

  const PropertyCard = ({ property }: { property: Property }) => {
    const displayImage = propertyImages[property.id] || property.image || 'https://images.unsplash.com/photo-1600607687939-ce8a6c25118c?w=800';
    
    return (
      <Card className="hover:shadow-lg transition-shadow duration-200">
        <div className="relative">
          <img 
            src={displayImage}
            alt={property.title}
            className="w-full h-48 object-cover rounded-t-lg"
          />
          {property.featured && (
            <Badge className="absolute top-2 left-2 bg-gold-500">
              <Star className="h-3 w-3 mr-1" />
              Featured
            </Badge>
          )}
        </div>
        
        <CardContent className="p-4">
          <div className="space-y-3">
            <div>
              <h3 className="font-semibold text-lg line-clamp-2">{property.title}</h3>
              <div className="flex items-center text-gray-600 dark:text-gray-400 text-sm mt-1">
                <MapPin className="h-4 w-4 mr-1" />
                {property.location}
              </div>
            </div>

            <div className="flex justify-between items-center">
              <div className="font-bold text-xl text-gold-600">₹{property.price}</div>
              <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
                {property.type === 'residential' && (
                  <>
                    <span>{property.bedrooms} BHK</span>
                    <span>•</span>
                  </>
                )}
                <span>{property.area}</span>
              </div>
            </div>

            <div className="flex gap-2 pt-2 border-t">
              <Button variant="outline" size="sm" onClick={() => onEdit(property)}>
                <Edit className="h-4 w-4 mr-1" />
                Edit
              </Button>
              
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => onToggleFeatured(property.id, property.featured)}
              >
                <Star className={`h-4 w-4 mr-1 ${property.featured ? 'fill-current' : ''}`} />
                {property.featured ? 'Unfeature' : 'Feature'}
              </Button>

              <AlertDialog>
                <AlertDialogTrigger asChild>
                  <Button variant="destructive" size="sm">
                    <Trash2 className="h-4 w-4" />
                  </Button>
                </AlertDialogTrigger>
                <AlertDialogContent>
                  <AlertDialogHeader>
                    <AlertDialogTitle>Delete Property</AlertDialogTitle>
                    <AlertDialogDescription>
                      Are you sure you want to delete "{property.title}"? This action cannot be undone.
                    </AlertDialogDescription>
                  </AlertDialogHeader>
                  <AlertDialogFooter>
                    <AlertDialogCancel>Cancel</AlertDialogCancel>
                    <AlertDialogAction onClick={() => onDelete(property.id)}>
                      Delete
                    </AlertDialogAction>
                  </AlertDialogFooter>
                </AlertDialogContent>
              </AlertDialog>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  };

  if (properties.length === 0) {
    return (
      <Card>
        <CardContent className="p-12 text-center">
          <div className="text-gray-500 dark:text-gray-400">
            <Home className="h-12 w-12 mx-auto mb-4 opacity-50" />
            <h3 className="text-lg font-semibold mb-2">No properties found</h3>
            <p>Try adjusting your search criteria or add a new property.</p>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {properties.map((property) => (
        <PropertyCard key={property.id} property={property} />
      ))}
    </div>
  );
};

export default PropertyGrid;
